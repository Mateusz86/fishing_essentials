package pl.mateusz.drozdz.fishing_essentials.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import pl.mateusz.drozdz.fishing_essentials.dao.Bait;
import pl.mateusz.drozdz.fishing_essentials.dao.GroundBait;
import pl.mateusz.drozdz.fishing_essentials.dao.Methods;
import pl.mateusz.drozdz.fishing_essentials.dao.Fishes;
import pl.mateusz.drozdz.fishing_essentials.dao.Places;
import pl.mateusz.drozdz.fishing_essentials.dao.Fishing;
import pl.mateusz.drozdz.fishing_essentials.dao.CaughtFish;

import pl.mateusz.drozdz.fishing_essentials.dao.BaitDao;
import pl.mateusz.drozdz.fishing_essentials.dao.GroundBaitDao;
import pl.mateusz.drozdz.fishing_essentials.dao.MethodsDao;
import pl.mateusz.drozdz.fishing_essentials.dao.FishesDao;
import pl.mateusz.drozdz.fishing_essentials.dao.PlacesDao;
import pl.mateusz.drozdz.fishing_essentials.dao.FishingDao;
import pl.mateusz.drozdz.fishing_essentials.dao.CaughtFishDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig baitDaoConfig;
    private final DaoConfig groundBaitDaoConfig;
    private final DaoConfig methodsDaoConfig;
    private final DaoConfig fishesDaoConfig;
    private final DaoConfig placesDaoConfig;
    private final DaoConfig fishingDaoConfig;
    private final DaoConfig caughtFishDaoConfig;

    private final BaitDao baitDao;
    private final GroundBaitDao groundBaitDao;
    private final MethodsDao methodsDao;
    private final FishesDao fishesDao;
    private final PlacesDao placesDao;
    private final FishingDao fishingDao;
    private final CaughtFishDao caughtFishDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        baitDaoConfig = daoConfigMap.get(BaitDao.class).clone();
        baitDaoConfig.initIdentityScope(type);

        groundBaitDaoConfig = daoConfigMap.get(GroundBaitDao.class).clone();
        groundBaitDaoConfig.initIdentityScope(type);

        methodsDaoConfig = daoConfigMap.get(MethodsDao.class).clone();
        methodsDaoConfig.initIdentityScope(type);

        fishesDaoConfig = daoConfigMap.get(FishesDao.class).clone();
        fishesDaoConfig.initIdentityScope(type);

        placesDaoConfig = daoConfigMap.get(PlacesDao.class).clone();
        placesDaoConfig.initIdentityScope(type);

        fishingDaoConfig = daoConfigMap.get(FishingDao.class).clone();
        fishingDaoConfig.initIdentityScope(type);

        caughtFishDaoConfig = daoConfigMap.get(CaughtFishDao.class).clone();
        caughtFishDaoConfig.initIdentityScope(type);

        baitDao = new BaitDao(baitDaoConfig, this);
        groundBaitDao = new GroundBaitDao(groundBaitDaoConfig, this);
        methodsDao = new MethodsDao(methodsDaoConfig, this);
        fishesDao = new FishesDao(fishesDaoConfig, this);
        placesDao = new PlacesDao(placesDaoConfig, this);
        fishingDao = new FishingDao(fishingDaoConfig, this);
        caughtFishDao = new CaughtFishDao(caughtFishDaoConfig, this);

        registerDao(Bait.class, baitDao);
        registerDao(GroundBait.class, groundBaitDao);
        registerDao(Methods.class, methodsDao);
        registerDao(Fishes.class, fishesDao);
        registerDao(Places.class, placesDao);
        registerDao(Fishing.class, fishingDao);
        registerDao(CaughtFish.class, caughtFishDao);
    }
    
    public void clear() {
        baitDaoConfig.getIdentityScope().clear();
        groundBaitDaoConfig.getIdentityScope().clear();
        methodsDaoConfig.getIdentityScope().clear();
        fishesDaoConfig.getIdentityScope().clear();
        placesDaoConfig.getIdentityScope().clear();
        fishingDaoConfig.getIdentityScope().clear();
        caughtFishDaoConfig.getIdentityScope().clear();
    }

    public BaitDao getBaitDao() {
        return baitDao;
    }

    public GroundBaitDao getGroundBaitDao() {
        return groundBaitDao;
    }

    public MethodsDao getMethodsDao() {
        return methodsDao;
    }

    public FishesDao getFishesDao() {
        return fishesDao;
    }

    public PlacesDao getPlacesDao() {
        return placesDao;
    }

    public FishingDao getFishingDao() {
        return fishingDao;
    }

    public CaughtFishDao getCaughtFishDao() {
        return caughtFishDao;
    }

}
