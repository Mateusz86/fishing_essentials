package pl.mateusz.drozdz.fishing_essentials.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import pl.mateusz.drozdz.fishing_essentials.dao.Photos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHOTOS.
*/
public class PhotosDao extends AbstractDao<Photos, Long> {

    public static final String TABLENAME = "PHOTOS";

    /**
     * Properties of entity Photos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Photos = new Property(1, String.class, "photos", false, "PHOTOS");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property MethodsId = new Property(3, Long.class, "methodsId", false, "METHODS_ID");
        public final static Property FishesId = new Property(4, Long.class, "fishesId", false, "FISHES_ID");
    };

    private Query<Photos> methods_PhotosQuery;
    private Query<Photos> fishes_PhotosQuery;

    public PhotosDao(DaoConfig config) {
        super(config);
    }
    
    public PhotosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHOTOS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHOTOS' TEXT NOT NULL ," + // 1: photos
                "'DATE' INTEGER," + // 2: date
                "'METHODS_ID' INTEGER," + // 3: methodsId
                "'FISHES_ID' INTEGER);"); // 4: fishesId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHOTOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Photos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPhotos());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        Long methodsId = entity.getMethodsId();
        if (methodsId != null) {
            stmt.bindLong(4, methodsId);
        }
 
        Long fishesId = entity.getFishesId();
        if (fishesId != null) {
            stmt.bindLong(5, fishesId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Photos readEntity(Cursor cursor, int offset) {
        Photos entity = new Photos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // photos
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // methodsId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // fishesId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Photos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhotos(cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMethodsId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFishesId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Photos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Photos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "photos" to-many relationship of Methods. */
    public List<Photos> _queryMethods_Photos(Long methodsId) {
        synchronized (this) {
            if (methods_PhotosQuery == null) {
                QueryBuilder<Photos> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MethodsId.eq(null));
                queryBuilder.orderRaw("DATE ASC");
                methods_PhotosQuery = queryBuilder.build();
            }
        }
        Query<Photos> query = methods_PhotosQuery.forCurrentThread();
        query.setParameter(0, methodsId);
        return query.list();
    }

    /** Internal query to resolve the "photos" to-many relationship of Fishes. */
    public List<Photos> _queryFishes_Photos(Long fishesId) {
        synchronized (this) {
            if (fishes_PhotosQuery == null) {
                QueryBuilder<Photos> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FishesId.eq(null));
                queryBuilder.orderRaw("DATE ASC");
                fishes_PhotosQuery = queryBuilder.build();
            }
        }
        Query<Photos> query = fishes_PhotosQuery.forCurrentThread();
        query.setParameter(0, fishesId);
        return query.list();
    }

}
